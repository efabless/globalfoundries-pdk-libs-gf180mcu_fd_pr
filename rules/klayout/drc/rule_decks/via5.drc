################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################

if BEOL
    if METAL_LEVEL == "6LM"
        #================================================
        #----------------------VIA5----------------------
        #================================================

        # Rule V5.1: Min/max Via5 size . is 0.26µm
        logger.info("Executing rule V5.1")
        v51_l1 = via5.edges.without_length(0.26.um).extended(0, 0, 0.001, 0.001)
        v51_l1.output("V5.1", "V5.1 : Min/max Via5 size . : 0.26µm")
        v51_l1.forget

        # Rule V5.2a: min. via5 spacing is 0.26µm
        logger.info("Executing rule V5.2a")
        v52a_l1  = via5.space(0.26.um, euclidian).polygons(0.001)
        v52a_l1.output("V5.2a", "V5.2a : min. via5 spacing : 0.26µm")
        v52a_l1.forget

        merged_via5   = via5.sized(0.18.um).sized(-0.18.um).with_bbox_min(1.82.um , nil).extents.inside(metal5)
        via5_mask     = merged_via5.size(1).not(via5).with_holes(16, nil)
        selected_via5 = via5.interacting(via5_mask)
        # Rule V5.2b: Via5 Space in 4x4 or larger via5 array is 0.36µm
        logger.info("Executing rule V5.2b")
        v52b_l1  = selected_via5.space(0.36.um, euclidian).polygons(0.001)
        v52b_l1.output("V5.2b", "V5.2b : Via5 Space in 4x4 or larger via5 array : 0.36µm")
        v52b_l1.forget

        merged_via5.forget

        via5_mask.forget

        selected_via5.forget

        # rule V5.3a is not a DRC check

        # Rule V5.3b: metal5  overlap of via5.
        logger.info("Executing rule V5.3b")
        v53b_l1 = via5.enclosed(metal5, 0.01.um, euclidian).polygons(0.001).or(via5.not_inside(metal5).not(metal5))
        v53b_l1.output("V5.3b", "V5.3b : metal5  overlap of via5.")
        v53b_l1.forget

        v5p4b_cond = metaltop.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)
        v5p3c_eol = metal5.edges.with_length(nil, 0.34.um).interacting(v5p3c_cond.first_edges).interacting(v5p3c_cond.second_edges).not(v5p3c_cond.first_edges).not(v5p3c_cond.second_edges)
        # Rule V5.3c: metal5 (< 0.34um) end-of-line overlap. is 0.06µm
        logger.info("Executing rule V5.3c")
        v53c_l1 = v5p3c_eol.enclosing(via5.edges,0.06.um, projection).polygons(0.001)
        v53c_l1.output("V5.3c", "V5.3c : metal5 (< 0.34um) end-of-line overlap. : 0.06µm")
        v53c_l1.forget

        v5p3c_cond.forget

        v5p3c_eol.forget

        v5_3d_1 = via5.edges.interacting(via5.drc(enclosed(metal5, projection) < 0.04.um).edges.centers(0, 0.5))
        v5_3d_2 = via5.edges.interacting(via5.drc(0.04.um <= enclosed(metal5, projection) < 0.06.um).centers(0, 0.5))
        v5_3d_3 = v5_3d_1.extended(0, 0, 0, 0.001, joined).corners(90)
        # Rule V5.3d: If metal5 overlap via5 by < 0.04um on one side, adjacent metal5 edges overlap. is 0.06µm
        logger.info("Executing rule V5.3d")
        v53d_l1 = v5_3d_2.not_in(v5_3d_1).interacting(v5_3d_1).or(v5_3d_1.interacting(v5_3d_3)).enclosed(metal5.edges, 0.06.um).polygons(0.001)
        v53d_l1.output("V5.3d", "V5.3d : If metal5 overlap via5 by < 0.04um on one side, adjacent metal5 edges overlap. : 0.06µm")
        v53d_l1.forget

        v5_3d_1.forget

        v5_3d_2.forget

        v5_3d_3.forget

        # rule V5.3e is not a DRC check

        # Rule V5.4a: metaltop overlap of via5.
        logger.info("Executing rule V5.4a")
        v54a_l1 = via5.enclosed(metaltop, 0.01.um, euclidian).polygons(0.001).or(via5.not_inside(metaltop).not(metaltop))
        v54a_l1.output("V5.4a", "V5.4a : metaltop overlap of via5.")
        v54a_l1.forget

        v5p4b_cond = metaltop.drc( width <= 0.34.um).with_length(0.28.um,nil,both)
        v5p4b_eol = metaltop.edges.with_length(nil, 0.34.um).interacting(v5p4b_cond.first_edges).interacting(v5p4b_cond.second_edges).not(v5p4b_cond.first_edges).not(v5p4b_cond.second_edges)
        # Rule V5.4b: metaltop (< 0.34um) end-of-line overlap. is 0.06µm
        logger.info("Executing rule V5.4b")
        v54b_l1 = v5p4b_eol.enclosing(via5.edges,0.06.um, projection).polygons(0.001)
        v54b_l1.output("V5.4b", "V5.4b : metaltop (< 0.34um) end-of-line overlap. : 0.06µm")
        v54b_l1.forget

        v5p4b_cond.forget

        v5p4b_eol.forget

        v5_4c_1 = via5.edges.interacting(via5.drc(enclosed(metaltop, projection) < 0.04.um).edges.centers(0, 0.5))
        v5_4c_2 = via5.edges.interacting(via5.drc(0.04.um <= enclosed(metaltop, projection) < 0.06.um).centers(0, 0.5))
        v5_4c_3 = v5_4c_1.extended(0, 0, 0, 0.001, joined).corners(90)
        # Rule V5.4c: If metaltop overlap via5 by < 0.04um on one side, adjacent metaltop edges overlap. is 0.06µm
        logger.info("Executing rule V5.4c")
        v54c_l1 = v5_4c_2.not_in(v5_4c_1).interacting(v5_4c_1).or(v5_4c_1.interacting(v5_4c_3)).enclosed(metaltop.edges, 0.06.um).polygons(0.001)
        v54c_l1.output("V5.4c", "V5.4c : If metaltop overlap via5 by < 0.04um on one side, adjacent metaltop edges overlap. : 0.06µm")
        v54c_l1.forget

        v5_4c_1.forget

        v5_4c_2.forget

        v5_4c_3.forget

        # rule V5.4d is not a DRC check

        # rule V5.5 is not a DRC check
    end
end #VIA5

