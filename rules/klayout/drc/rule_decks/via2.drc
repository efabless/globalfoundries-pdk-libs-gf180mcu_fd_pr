################################################################################################
# Copyright 2022 GlobalFoundries PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################################


if BEOL
    if METAL_LEVEL == "3LM" || METAL_LEVEL == "4LM" || METAL_LEVEL == "5LM" || METAL_LEVEL == "6LM"
        #================================================
        #----------------------VIA2----------------------
        #================================================

        # Rule V2.1: Min/max Via2 size . is 0.26µm
        logger.info("Executing rule V2.1")
        v21_l1 = via2.edges.without_length(0.26.um).extended(0, 0, 0.001, 0.001)
        v21_l1.output("V2.1", "V2.1 : Min/max Via2 size . : 0.26µm")
        v21_l1.forget

        # Rule V2.2a: min. via2 spacing is 0.26µm
        logger.info("Executing rule V2.2a")
        v22a_l1  = via2.space(0.26.um, euclidian).polygons(0.001)
        v22a_l1.output("V2.2a", "V2.2a : min. via2 spacing : 0.26µm")
        v22a_l1.forget

        merged_via2 = via2.sized(0.18.um).sized(-0.18.um).with_bbox_min(1.82.um , nil).extents.inside(metal2)
        via2_mask = merged_via2.size(1).not(via2).with_holes(16, nil)
        selected_via2 = via2.interacting(via2_mask)
        # Rule V2.2b: Via2 Space in 4x4 or larger via2 array is 0.36µm
        logger.info("Executing rule V2.2b")
        v22b_l1  = selected_via2.space(0.36.um, euclidian).polygons(0.001)
        v22b_l1.output("V2.2b", "V2.2b : Via2 Space in 4x4 or larger via2 array : 0.36µm")
        v22b_l1.forget

        merged_via2.forget

        via2_mask.forget

        selected_via2.forget

        # rule V2.3a is not a DRC check

        # Rule V2.3b: metal2  overlap of via2.
        logger.info("Executing rule V2.3b")
        v23b_l1 = via2.enclosed(metal2, 0.01.um, euclidian).polygons(0.001).or(via2.not_inside(metal2).not(metal2))
        v23b_l1.output("V2.3b", "V2.3b : metal2  overlap of via2.")
        v23b_l1.forget
        
        v2p3c_cond = metal2.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)

        v2p3c_eol = metal2.edges.with_length(nil, 0.34.um).interacting(v2p3c_cond.first_edges).interacting(v2p3c_cond.second_edges).not(v2p3c_cond.first_edges).not(v2p3c_cond.second_edges)
        # Rule V2.3c: metal2 (< 0.34um) end-of-line overlap. is 0.06µm
        logger.info("Executing rule V2.3c")
        v23c_l1 = v2p3c_eol.enclosing(via2.edges,0.06.um, projection).polygons(0.001)
        v23c_l1.output("V2.3c", "V2.3c : metal2 (< 0.34um) end-of-line overlap. : 0.06µm")
        v23c_l1.forget

        v2p3c_cond.forget

        v2p3c_eol.forget

        v2_3d_1 = via2.edges.interacting(via2.drc(enclosed(metal2, projection) < 0.04.um).edges.centers(0, 0.5))
        v2_3d_2 = via2.edges.interacting(via2.drc(0.04.um <= enclosed(metal2, projection) < 0.06.um).centers(0, 0.5))
        v2_3d_3 = v2_3d_1.extended(0, 0, 0, 0.001, joined).corners(90)
        # Rule V2.3d: If metal2 overlap via2 by < 0.04um on one side, adjacent metal2 edges overlap. is 0.06µm
        logger.info("Executing rule V2.3d")
        v23d_l1 = v2_3d_2.not_in(v2_3d_1).interacting(v2_3d_1).or(v2_3d_1.interacting(v2_3d_3)).enclosed(metal2.edges, 0.06.um).polygons(0.001)
        v23d_l1.output("V2.3d", "V2.3d : If metal2 overlap via2 by < 0.04um on one side, adjacent metal2 edges overlap. : 0.06µm")
        v23d_l1.forget

        v2_3d_1.forget

        v2_3d_2.forget

        v2_3d_3.forget

        # rule V2.3e is not a DRC check

        # Rule V2.4a: metal3 overlap of via2.
        logger.info("Executing rule V2.4a")
        v24a_l1 = via2.enclosed(metal3, 0.01.um, euclidian).polygons(0.001).or(via2.not_inside(metal3).not(metal3))
        v24a_l1.output("V2.4a", "V2.4a : metal3 overlap of via2.")
        v24a_l1.forget

        v2p4b_cond = metal3.width(0.34.um + 1.dbu).with_length(0.28.um,nil,both)

        v2p4b_eol = metal3.edges.with_length(nil, 0.34.um).interacting(v2p4b_cond.first_edges).interacting(v2p4b_cond.second_edges).not(v2p4b_cond.first_edges).not(v2p4b_cond.second_edges)
        # Rule V2.4b: metal3 (< 0.34um) end-of-line overlap. is 0.06µm
        logger.info("Executing rule V2.4b")
        v24b_l1 = v2p4b_eol.enclosing(via2.edges,0.06.um, projection).polygons(0.001)
        v24b_l1.output("V2.4b", "V2.4b : metal3 (< 0.34um) end-of-line overlap. : 0.06µm")
        v24b_l1.forget

        v2p4b_cond.forget

        v2p4b_eol.forget

        v2_4c_1 = via2.edges.interacting(via2.drc(enclosed(metal3, projection) < 0.04.um).edges.centers(0, 0.5))
        v2_4c_2 = via2.edges.interacting(via2.drc(0.04.um <= enclosed(metal3, projection) < 0.06.um).centers(0, 0.5))
        v2_4c_3 = v2_4c_1.extended(0, 0, 0, 0.001, joined).corners(90)
        # Rule V2.4c: If metal3 overlap via2 by < 0.04um on one side, adjacent metal3 edges overlap. is 0.06µm
        logger.info("Executing rule V2.4c")
        v24c_l1 = v2_4c_2.not_in(v2_4c_1).interacting(v2_4c_1).or(v2_4c_1.interacting(v2_4c_3)).enclosed(metal3.edges, 0.06.um).polygons(0.001)
        v24c_l1.output("V2.4c", "V2.4c : If metal3 overlap via2 by < 0.04um on one side, adjacent metal3 edges overlap. : 0.06µm")
        v24c_l1.forget

        v2_4c_1.forget

        v2_4c_2.forget

        v2_4c_3.forget

        # rule V2.4d is not a DRC check

        # rule V2.5 is not a DRC check
    end
end #BEOL
